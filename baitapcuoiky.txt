
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Date;

public class QuanLyTienDienSwingApp1 {

    private static final String JDBC_URL = "jdbc:sqlserver://TRANHUYSUY\\SQLEXPRESS:1433;databaseName=QLTD;encrypt=true;trustServerCertificate=true;sslProtocol=TLS";
    private static final String DB_USER = "sa";
    private static final String DB_PASSWORD = "123456789";
    private static final String SELECT_ALL_QUERY = "SELECT * FROM HoaDonDien";
    private static final String INSERT_QUERY = "INSERT INTO HoaDonDien (SoDienSuDung, TienDien, NgayTao) VALUES (?, ?, ?)";
    private static final String UPDATE_QUERY = "UPDATE HoaDonDien SET SoDienSuDung = ?, TienDien = ?, NgayTao = ? WHERE ID = ?";
    private static final String DELETE_QUERY = "DELETE FROM HoaDonDien WHERE ID = ?";
    private static final String SEARCH_QUERY = "SELECT * FROM HoaDonDien WHERE SoDienSuDung = ?";

    private static Connection connection;

    public static void main(String[] args) {
        if (testConnection()) {
            SwingUtilities.invokeLater(() -> {
                createAndShowGUI();
            });
        } else {
            JOptionPane.showMessageDialog(null, "Không thể kết nối đến SQL Server. Hãy kiểm tra lại cài đặt kết nối.");
        }
    }

    private static boolean testConnection() {
        try {
            connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD);
            return true;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    private static double tienDienHienTai = 0.0;

    
    private static void createAndShowGUI() {
        JFrame frame = new JFrame("Quản Lý Tiền Điện");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel loginPanel = new JPanel();
        JTextField usernameField = new JTextField(15);
        JPasswordField passwordField = new JPasswordField(15);
        JButton loginButton = new JButton("Đăng Nhập");
        JButton registerButton = new JButton("Đăng Ký");

        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String username = usernameField.getText();
                String password = new String(passwordField.getPassword());

                if (authenticate(username, password)) {
                    showMainPanel(frame);
                } else {
                    JOptionPane.showMessageDialog(frame, "Sai tên đăng nhập hoặc mật khẩu. Đăng nhập không thành công.");
                }
            }

            private boolean authenticate(String username, String password) {
                try {
                    String sql = "SELECT * FROM NguoiDung WHERE TenDangNhap = ? AND MatKhau = ?";
                    try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                        preparedStatement.setString(1, username);
                        preparedStatement.setString(2, password);

                        ResultSet resultSet = preparedStatement.executeQuery();
                        return resultSet.next();
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                    return false;
                }
            }
        });

        registerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                showRegisterPanel(frame);
            }
        });

        loginPanel.add(new JLabel("Tên đăng nhập: "));
        loginPanel.add(usernameField);
        loginPanel.add(new JLabel("Mật khẩu: "));
        loginPanel.add(passwordField);
        loginPanel.add(loginButton);
        loginPanel.add(registerButton);

        frame.getContentPane().add(loginPanel);
        frame.setSize(300, 200);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private static void showMainPanel(JFrame frame) {
        JPanel mainPanel = new JPanel();
        JTextField soDienField = new JTextField(10);
        JButton tinhTienButton = new JButton("Tính Tiền");
        JLabel ketQuaLabel = new JLabel();

        tinhTienButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    int soDienSuDung = Integer.parseInt(soDienField.getText());
                    double tienDien = tinhTienDien(soDienSuDung);
                    ketQuaLabel.setText("Số tiền phải thanh toán là: " + tienDien + " nghìn VND");
                    luuDulieuVaoDatabase(soDienSuDung, tienDien);
                    DefaultTableModel model = new DefaultTableModel();
                    hienThiDuLieu(model);
                } catch (NumberFormatException ex) {
                    ketQuaLabel.setText("Vui lòng nhập số nguyên cho số điện sử dụng.");
                }
            }

            private static double tinhTienDien(int soDienSuDung) {
                // Giả sử giá tiền là 3000 VND cho mỗi số điện
                tienDienHienTai = soDienSuDung * 2.000;
                return tienDienHienTai;
            

            }

            private static void luuDulieuVaoDatabase(int soDienSuDung, double tienDien) {
                try {
                    // Lấy ngày và giờ hiện tại
                    Date currentDate = new Date();
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    String formattedDate = dateFormat.format(currentDate);

                    try (PreparedStatement insertStatement = connection.prepareStatement(INSERT_QUERY)) {
                        insertStatement.setInt(1, soDienSuDung);
                        insertStatement.setDouble(2, tienDien);
                        insertStatement.setString(3, formattedDate);

                        // Kiểm tra giá trị trả về của executeUpdate
                        int affectedRows = insertStatement.executeUpdate();
                        if (affectedRows > 0) {
                            JOptionPane.showMessageDialog(null, "Thêm dữ liệu thành công.");
                        } else {
                            JOptionPane.showMessageDialog(null, "Thêm dữ liệu thất bại.");
                        }
                    }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }


            private static void hienThiDuLieu(DefaultTableModel model) {
                try {
                    // Sử dụng biến kết nối toàn cục
                    Statement statement = connection.createStatement();
                    ResultSet resultSet = statement.executeQuery(SELECT_ALL_QUERY);

                    while (resultSet.next()) {
                        int id = resultSet.getInt("ID");
                        int soDienSuDung = resultSet.getInt("SoDienSuDung");
                        double tienDien = resultSet.getDouble("TienDien");

                        model.addRow(new Object[]{id, soDienSuDung, tienDien});
                    }

                    // Không đóng connection ở đây để sử dụng lại ở những chỗ khác
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }

        });

        JButton hienThiButton = new JButton("Hiển Thị Dữ Liệu");
        JButton themButton = new JButton("Thêm Dữ Liệu");
        JButton suaButton = new JButton("Sửa Dữ Liệu");
        JButton xoaButton = new JButton("Xoá Dữ Liệu");
        JButton timKiemButton = new JButton("Tìm Kiếm");

        JTable dataTable = new JTable();
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Số Điện Sử Dụng");
        model.addColumn("Tiền Điện");
        dataTable.setModel(model);

        hienThiButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                hienThiDuLieu(model);
            }

            private void hienThiDuLieu(DefaultTableModel model) {
                try {
                    Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD);
                    Statement statement = connection.createStatement();
                    ResultSet resultSet = statement.executeQuery(SELECT_ALL_QUERY);

                    while (resultSet.next()) {
                        int id = resultSet.getInt("ID");
                        int soDienSuDung = resultSet.getInt("SoDienSuDung");
                        double tienDien = resultSet.getDouble("TienDien");

                        model.addRow(new Object[]{id, soDienSuDung, tienDien});
                    }

                    connection.close();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        });

        themButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                themDuLieu(model, soDienField);
            }
        });

        suaButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                suaDuLieu(model, dataTable);
            }
        });

        xoaButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                xoaDuLieu(model, dataTable);
            }
        });

        timKiemButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timKiemDuLieu(model, soDienField);
            }
        });

        mainPanel.add(new JLabel("Số điện sử dụng: "));
        mainPanel.add(soDienField);
        mainPanel.add(tinhTienButton);
        mainPanel.add(ketQuaLabel);
        mainPanel.add(hienThiButton);
        mainPanel.add(themButton);
        mainPanel.add(suaButton);
        mainPanel.add(xoaButton);
        mainPanel.add(timKiemButton);
        mainPanel.add(new JScrollPane(dataTable));

        frame.getContentPane().removeAll();
        frame.getContentPane().add(mainPanel);
        frame.revalidate();
        frame.repaint();
    }

    private static void themDuLieu(DefaultTableModel model, JTextField soDienField) {
        try {
            int soDienSuDung = Integer.parseInt(soDienField.getText());
            double tienDien = tinhTienDien(soDienSuDung);

            Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD);
            String insertQuery = "INSERT INTO HoaDonDien (SoDienSuDung, TienDien) VALUES (?, ?)";
            PreparedStatement preparedStatement = connection.prepareStatement(insertQuery);

            preparedStatement.setInt(1, soDienSuDung);
            preparedStatement.setDouble(2, tienDien);

            int affectedRows = preparedStatement.executeUpdate();
            if (affectedRows > 0) {
                JOptionPane.showMessageDialog(null, "Thêm dữ liệu thành công.");
                hienThiDuLieu(model);
            }

            connection.close();
        } catch (NumberFormatException | SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Thêm dữ liệu thất bại.");
        }
    }

    private static void suaDuLieu(DefaultTableModel model, JTable dataTable) {
        int selectedRow = dataTable.getSelectedRow();
        if (selectedRow >= 0) {
            int id = (int) model.getValueAt(selectedRow, 0);
            int soDienSuDungMoi = Integer.parseInt(JOptionPane.showInputDialog("Nhập số điện sử dụng mới: "));

            // Tính lại số tiền điện dựa trên số điện mới
            double tienDienMoi = tinhTienDien(soDienSuDungMoi);

            try {
                Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD);
                PreparedStatement updateStatement = connection.prepareStatement(UPDATE_QUERY);

                // Thiết lập giá trị cho các tham số
                updateStatement.setInt(1, soDienSuDungMoi);
                updateStatement.setDouble(2, tienDienMoi);
                updateStatement.setTimestamp(3, new Timestamp(System.currentTimeMillis()));  // Ngày giờ hiện tại
                updateStatement.setInt(4, id);  // ID của bản ghi cần sửa đổi

                int affectedRows = updateStatement.executeUpdate();
                if (affectedRows > 0) {
                    JOptionPane.showMessageDialog(null, "Sửa dữ liệu thành công.");
                    hienThiDuLieu(model);
                }

                connection.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Sửa dữ liệu thất bại. Lỗi: " + ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn một dòng để sửa.");
        }
    }






    private static double tinhTienDien(int soDienSuDung) {
		// TODO Auto-generated method stub
		return 0;
	}

	private static void hienThiDuLieu(DefaultTableModel model) {
		// TODO Auto-generated method stub
		
	}

	private static void xoaDuLieu(DefaultTableModel model, JTable dataTable) {
        int selectedRow = dataTable.getSelectedRow();
        if (selectedRow >= 0) {
            int id = (int) model.getValueAt(selectedRow, 0);

            try {
                Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD);
                PreparedStatement deleteStatement = connection.prepareStatement(DELETE_QUERY);

                deleteStatement.setInt(1, id);

                int affectedRows = deleteStatement.executeUpdate();
                if (affectedRows > 0) {
                    JOptionPane.showMessageDialog(null, "Xoá dữ liệu thành công.");
                    hienThiDuLieu(model);
                }

                connection.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Xoá dữ liệu thất bại.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn một dòng để xoá.");
        }
    }

    private static void timKiemDuLieu(DefaultTableModel model, JTextField soDienField) {
        try {
            int soDienSuDung = Integer.parseInt(soDienField.getText());

            Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD);
            PreparedStatement searchStatement = connection.prepareStatement(SEARCH_QUERY);

            searchStatement.setInt(1, soDienSuDung);

            ResultSet resultSet = searchStatement.executeQuery();
            model.setRowCount(0);

            while (resultSet.next()) {
                int id = resultSet.getInt("ID");
                soDienSuDung = resultSet.getInt("SoDienSuDung");
                double tienDien = resultSet.getDouble("TienDien");

                model.addRow(new Object[]{id, soDienSuDung, tienDien});
            }

            connection.close();
        } catch (NumberFormatException | SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Tìm kiếm dữ liệu thất bại.");
        }
    }

    private static boolean registerUser(String newUsername, String newPassword) {
        try {
            String insertUserQuery = "INSERT INTO NguoiDung (TenDangNhap, MatKhau) VALUES (?, ?)";
            try (PreparedStatement insertUserStatement = connection.prepareStatement(insertUserQuery)) {
                insertUserStatement.setString(1, newUsername);
                insertUserStatement.setString(2, newPassword);
                int affectedRows = insertUserStatement.executeUpdate();
                return affectedRows > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    private static void showRegisterPanel(JFrame frame) {
        JPanel registerPanel = new JPanel();
        JTextField newUsernameField = new JTextField(15);
        JPasswordField newPasswordField = new JPasswordField(15);
        JButton registerButton = new JButton("Đăng Ký");
        JButton backButton = new JButton("Quay Lại");

        registerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String newUsername = newUsernameField.getText();
                String newPassword = new String(newPasswordField.getPassword());

                if (registerUser(newUsername, newPassword)) {
                    JOptionPane.showMessageDialog(frame, "Đăng ký thành công. Bạn có thể đăng nhập ngay bây giờ.");
                    showLoginPanel(frame);
                } else {
                    JOptionPane.showMessageDialog(frame, "Đăng ký thất bại. Vui lòng thử lại.");
                }
            }
        });

        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                showLoginPanel(frame);
            }
        });

        registerPanel.add(new JLabel("Tên đăng nhập mới: "));
        registerPanel.add(newUsernameField);
        registerPanel.add(new JLabel("Mật khẩu mới: "));
        registerPanel.add(newPasswordField);
        registerPanel.add(registerButton);
        registerPanel.add(backButton);

        frame.getContentPane().removeAll();
        frame.getContentPane().add(registerPanel);
        frame.revalidate();
        frame.repaint();
    }

    private static void showLoginPanel(JFrame frame) {
        JPanel loginPanel = new JPanel();
        JTextField usernameField = new JTextField(15);
        JPasswordField passwordField = new JPasswordField(15);
        JButton loginButton = new JButton("Đăng Nhập");
        JButton registerButton = new JButton("Đăng Ký");

        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String username = usernameField.getText();
                String password = new String(passwordField.getPassword());

                if (authenticate(username, password)) {
                    showMainPanel(frame);
                } else {
                    JOptionPane.showMessageDialog(frame, "Sai tên đăng nhập hoặc mật khẩu. Đăng nhập không thành công.");
                }
            }

            private boolean authenticate(String username, String password) {
                try {
                    String sql = "SELECT * FROM NguoiDung WHERE TenDangNhap = ? AND MatKhau = ?";
                    try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                        preparedStatement.setString(1, username);
                        preparedStatement.setString(2, password);

                        ResultSet resultSet = preparedStatement.executeQuery();
                        return resultSet.next();
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                    return false;
                }
            }
        });

        registerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                showRegisterPanel(frame);
            }
        });

        loginPanel.add(new JLabel("Tên đăng nhập: "));
        loginPanel.add(usernameField);
        loginPanel.add(new JLabel("Mật khẩu: "));
        loginPanel.add(passwordField);
        loginPanel.add(loginButton);
        loginPanel.add(registerButton);

        frame.getContentPane().removeAll();
        frame.getContentPane().add(loginPanel);
        frame.revalidate();
        frame.repaint();
    }
}


